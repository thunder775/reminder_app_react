{"version":3,"sources":["timer/index.js","page/index.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_isMounted","state","difference","Math","floor","date","getTime","Date","now","intervalId","this","handleTimer","clearInterval","setInterval","alert","removeTimer","setState","React","Component","Page","dates","timer","document","getElementById","value","toString","length","console","log","temp","slice","push","getTimers","timers","i","key","splice","type","id","onClick","AddReminder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQA6DeA,E,kDA1DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,YAAa,EAZT,EAAKC,MAAQ,CACTC,WAAYC,KAAKC,OAAO,EAAKL,MAAMM,KAAKC,UAAY,IAAIC,KAAKA,KAAKC,QAAU,MAGhF,EAAKC,WAAa,KANH,E,gEAWfC,KAAKC,gB,6CAMLC,cAAcF,KAAKD,YACnBC,KAAKV,YAAa,I,yJAKlBU,KAAKV,YAAa,EAElBU,KAAKD,WAAaI,aAAY,WAE1B,GAAI,EAAKZ,MAAMC,WAAa,EAKxB,OAHAY,MAAM,wBACN,EAAKf,MAAMgB,cAIf,EAAKC,SAAS,CACVd,WAAY,EAAKD,MAAMC,WAAa,MAIzC,K,qIAUH,OACI,6BACI,+BAAKC,KAAKC,MAAMM,KAAKT,MAAMC,WAAa,MAAxC,UAAuDC,KAAKC,MAAMM,KAAKT,MAAMC,WAAa,IAAO,GAAjG,YAA8GQ,KAAKT,MAAMC,WAAa,GAAtI,iB,GApDIe,IAAMC,WCsDXC,E,kDApDX,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IACDE,MAAQ,CACTmB,MAAO,IAHI,E,0DAQf,IAAIC,EAAQC,SAASC,eAAe,SAASC,MAAMC,WACnD,GAAqB,IAAjBJ,EAAMK,OAAV,CAGA,IAAIrB,EAAO,IAAIE,KAAKc,GACpBM,QAAQC,IAAIlB,KAAKT,OACjB,IAAI4B,EAAOnB,KAAKT,MAAMmB,MAAMU,QAC5BD,EAAKE,KAAK1B,GACVK,KAAKM,SAAS,CACVI,MAAOS,IAGXnB,KAAKsB,e,kCAOL,IAHS,IAAD,OAEJC,EAAS,GAFL,WAGCC,GACLD,EAAOF,KACH,kBAAC,EAAD,CAAO1B,KAAM,EAAKJ,MAAMmB,MAAMc,GAAIC,IAAK,EAAKlC,MAAMmB,MAAMc,GAAG5B,UAAWS,YAAa,WAC/E,IAAIc,EAAO,EAAK5B,MAAMmB,MAAMU,QAC5BD,EAAKO,OAAOF,EAAE,GACd,EAAKlB,SAAS,CACVI,MAAOS,SANdK,EAAI,EAAGA,EAAIxB,KAAKT,MAAMmB,MAAMM,OAAQQ,IAAM,EAA1CA,GAWT,OAAOD,I,+BAGD,IAAD,OACL,OACI,6BACI,2BAAOI,KAAK,iBAAiBC,GAAI,UACjC,4BAAQC,QAAS,kBAAM,EAAKC,gBAA5B,gBACC9B,KAAKsB,iB,GA/CHf,IAAMC,WCQVuB,MARf,WACI,OACI,6BACC,kBAAC,EAAD,QCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.507f6640.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            difference: Math.floor((this.props.date.getTime() - new Date(Date.now())) / 1000),\r\n\r\n        };\r\n        this.intervalId = null;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.handleTimer();\r\n    }\r\n\r\n    _isMounted = false;\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    async handleTimer() {\r\n        this._isMounted = true;\r\n\r\n        this.intervalId = setInterval(() => {\r\n\r\n            if (this.state.difference < 1) {\r\n\r\n                alert(\"Timer timed out\");\r\n                this.props.removeTimer();\r\n\r\n                return;\r\n            }\r\n            this.setState({\r\n                difference: this.state.difference - 1\r\n            })\r\n\r\n\r\n        }, 1000);\r\n\r\n\r\n    }\r\n\r\n    // second = this.state.difference % 60;\r\n    // minute = (Math.floor(this.state.difference / 60)) % 60;\r\n    // hour = Math.floor(this.state.difference / 3600);\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p> {Math.floor(this.state.difference / 3600)}:hours {(Math.floor(this.state.difference / 60)) % 60}:minutes {this.state.difference % 60}:seconds</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport Timer from \"../timer\";\r\n\r\nclass Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dates: []\r\n        }\r\n    }\r\n\r\n    AddReminder() {\r\n        let timer = document.getElementById(\"timer\").value.toString();\r\n        if (timer.length === 0) {\r\n            return;\r\n        }\r\n        let date = new Date(timer);\r\n        console.log(this.state);\r\n        let temp = this.state.dates.slice();\r\n        temp.push(date);\r\n        this.setState({\r\n            dates: temp,\r\n\r\n        });\r\n        this.getTimers();\r\n        // console.log(this.state.timeDifferences)\r\n    }\r\n\r\n    getTimers() {\r\n\r\n        let timers = [];\r\n        for (let i = 0; i < this.state.dates.length; i++) {\r\n            timers.push(\r\n                <Timer date={this.state.dates[i]} key={this.state.dates[i].getTime()} removeTimer={() => {\r\n                    let temp = this.state.dates.slice();\r\n                    temp.splice(i,1);\r\n                    this.setState({\r\n                        dates: temp\r\n                    });\r\n                }}/>\r\n            )\r\n        }\r\n        return timers;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"datetime-local\" id={\"timer\"}/>\r\n                <button onClick={() => this.AddReminder()}>Add Reminder</button>\r\n                {this.getTimers()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page;","import React from 'react';\nimport './App.css';\nimport Page from'./page'\nfunction App() {\n    return (\n        <div>\n         <Page/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}